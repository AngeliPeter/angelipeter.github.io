@page "/artist"
@using Newtonsoft.Json
@using System.Globalization
@inject NavigationManager NavManager
@inject ISpotify spotify
@implements IDisposable
@inject SpotifyDb spotifyDb
@inject NavigationUtils NavUtils
@inject PlayUtils PlayUtils


@if (!loadingData)
{
    <div class="info-container">
        <div class="left-side">
            @if (artist.Images[0] != null)
            {
                <img src="@artist.Images[0].Url" class="playlist-picture" />
            }
            else
            {
                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="playlist-picture" />
            }
        </div>
        <div class="right-side">
            <div class="playlist-title">@artist.Name</div>
            @if (@artist.Genres.Count() != 0)
            {
                <div class="playlist-description">
                    <i class="bi bi-music-note-beamed"></i>
                    @foreach (var genre in @artist.Genres)
                    {
                        <span class="genre">@genre</span>
                    }
                </div>
            }
            <div class="playlist-description">
                <i class="bi bi-people-fill"></i><span class="genre">@(artist.Followers.Total.ToString("n", new NumberFormatInfo {NumberGroupSeparator = " ", NumberDecimalDigits = 0}))</span> followers
            </div>
            <div class="playlist-description">
                <i class="bi bi-graph-up-arrow"></i><span class="genre">@(artist.Popularity)</span> / 100 popularity
            </div>
            @if (@loadedFromCache)
            {
                <div class="playlist-refresh cache"><i class="bi bi-lightning-charge-fill"></i><span>Loaded from memory</span></div>
            }
            else
            {
                
                <div class="playlist-refresh spotify"><i class="bi bi-spotify"></i><span>Synced with Spotify</span></div>
            }
        </div>
    </div>

    <div class="album-header">Top Tracks</div>

    var Tool = (new List<string>() { "Search" });

    <div class="col-lg-12 control-section">
        <div class="row">
            <SfGrid DataSource="@TracksGridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true"
                Toolbar=@Tool>
                <GridPageSettings PageSize="5" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var trackInfo = (context as FullTrack);

                            <div class="play-button-inline" @onclick="@(() => PlayUtils.ClickedPlay(trackInfo.Uri, spotifyClient))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="TrackNumber" HeaderText="#" AutoFit="true" />
                <GridColumn Field="Name" HeaderText="Title" />
                <GridColumn Field="Artists.Count" HeaderText="Artists">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);

                            @for (int i = 0; i < @trackInfo.Artists.Count; i++)
                            {
                                SimpleArtist artist = @trackInfo.Artists.ElementAt(i);
                                <span class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnArtist(artist.Id))">@artist.Name</span>
                                if (i + 1 < @trackInfo.Artists.Count)
                                {
                                    <span class="comma">, </span>
                                }
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Popularity" HeaderText="Popularity" />
                <GridColumn Field="DurationMs" HeaderText="Length">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);
                            long secondsDur = trackInfo.DurationMs / 1000;
                            long minutesDur = secondsDur / 60;
                            <span>@($"{minutesDur}:{(secondsDur % 60):D2}")</span>
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Explicit" HeaderText="Explicit">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);

                            if (trackInfo.Explicit)
                            {
                                <i class="bi bi-explicit-fill"></i>
                            }
                        }

                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>


    <div class="album-header">Albums</div>

    <div class="col-lg-12 control-section">
        <div class="row">
            <SfGrid DataSource="@AlbumGridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true">
                <GridPageSettings PageSize="5" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var albumInfo = (context as SimpleAlbum);

                            <div class="play-button-inline" @onclick="@(() => PlayUtils.ClickedAlbumPlay(albumInfo.Uri, spotifyClient))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" Width="80">
                    <Template>
                        @{
                            var albumInfo = (context as SimpleAlbum);
                            @if (albumInfo.Images.Count > 0 && albumInfo.Images[0] != null)
                            {
                                <img src="@albumInfo.Images[0].Url" class="albumInfo-image" />
                            }
                            else
                            {
                                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="albumInfo-image" />
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Artists">
                    <Template>
                        @{
                            var albumInfo = (context as SimpleAlbum);
                            foreach (var artist in albumInfo.Artists)
                            {
                                <span class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnArtist(artist.Id))">@artist.Name</span>
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Name" HeaderText="Album Title">
                    <Template>
                        @{
                            var albumInfo = (context as SimpleAlbum);
                            <div class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnAlbum(albumInfo.Id))">@albumInfo.Name</div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="TotalTracks" HeaderText="Number of Tracks" />
                <!--<GridColumn Field="Popularity" HeaderText="Popularity" />-->
                <GridColumn Field="ReleaseDate" HeaderText="Release Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" />
            </GridColumns>
        </SfGrid>
    </div>
</div>

    <div class="album-header">Singles and EPs</div>

    <div class="col-lg-12 control-section">
        <div class="row">
            <SfGrid DataSource="@EPGridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true">
                <GridPageSettings PageSize="5" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var albumInfo = (context as SimpleAlbum);

                            <div class="play-button-inline" @onclick="@(() => PlayUtils.ClickedAlbumPlay(albumInfo.Uri, spotifyClient))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" Width="80">
                    <Template>
                        @{
                            var albumInfo = (context as SimpleAlbum);
                            @if (albumInfo.Images.Count > 0 && albumInfo.Images[0] != null)
                            {
                                <img src="@albumInfo.Images[0].Url" class="albumInfo-image" />
                            }
                            else
                            {
                                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="albumInfo-image" />
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Artists">
                    <Template>
                        @{
                           var albumInfo = (context as SimpleAlbum);

                            @for (int i = 0; i < @albumInfo.Artists.Count; i++)
                            {
                                SimpleArtist artist = @albumInfo.Artists.ElementAt(i);
                                <span class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnArtist(artist.Id))">@artist.Name</span>
                                if (i + 1 < @albumInfo.Artists.Count)
                                {
                                    <span class="comma">, </span>
                                }
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Name" HeaderText="Album Title">
                    <Template>
                        @{
                            var albumInfo = (context as SimpleAlbum);
                            <div class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnAlbum(albumInfo.Id))">@albumInfo.Name</div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="TotalTracks" HeaderText="Number of Tracks" />
                <!--<GridColumn Field="Popularity" HeaderText="Popularity" />-->
                <GridColumn Field="ReleaseDate" HeaderText="Release Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" />
            </GridColumns>
        </SfGrid>
    </div>
</div>
}

<div class="refresh-button">
    <button type="button" class="btn btn-primary btn-sm" disabled="@loadingData" @onclick="SpotifyArtistlistLoad">
        <span>Refresh artist page</span>
        @if (loadingData)
        {
            <span class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </span>
        }
    </button>
</div>


@code {
    SpotifyClient spotifyClient = null;

    FullArtist artist = null;
    List<SimpleAlbum> albums = new List<SimpleAlbum>();
    List<SimpleAlbum> eps = new List<SimpleAlbum>();
    List<FullTrack> topTracks = new List<FullTrack>();

    ArtistWrapper artistWrapper = new ArtistWrapper();

    float loadingPercentage = 0;

    string searchPhrase = "";
    bool loadingData = true;
    bool loadedFromCache = true;
    int offset = 0;
    public IEnumerable<SimpleAlbum> AlbumGridData { get; set; }
    public IEnumerable<SimpleAlbum> EPGridData { get; set; }
    public IEnumerable<FullTrack> TracksGridData { get; set; }

    private async void UpdateQuery(object sender, LocationChangedEventArgs e)
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("artistId", out var _searchPhrase))
        {
            loadingData = true;
            StateHasChanged();
            searchPhrase = _searchPhrase;
            await spotifyDb.Open();

            if ((artistWrapper = await spotifyDb.SavedArtists.Get<string, ArtistWrapper>(searchPhrase)) == null)
            {
                SpotifyArtistlistLoad();
            }
            else
            {
                loadedFromCache = true;
                AlbumGridData = artistWrapper.Albums;
                TracksGridData = artistWrapper.TopTracks;
                EPGridData = artistWrapper.Eps;
                artist = artistWrapper.Artist;
                loadingData = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
        }
        spotifyClient = result.SpotifyObject;

        UpdateQuery(null, null);

        NavManager.LocationChanged += UpdateQuery;
    }

    private async void SpotifyArtistlistLoad()
    {
        await spotifyDb.SavedArtists.Delete(searchPhrase);
        albums = new List<SimpleAlbum>();
        eps = new List<SimpleAlbum>();
        topTracks = new List<FullTrack>();
        loadingData = true;

        StateHasChanged();

        artist = (await spotifyClient.Artists.Get(searchPhrase));

        /// Top Tracks ///

        ArtistsTopTracksRequest attr = new ArtistsTopTracksRequest((await spotifyClient.UserProfile.Current()).Country);

        topTracks = (await spotifyClient.Artists.GetTopTracks(searchPhrase, attr)).Tracks;
        TracksGridData = topTracks;

        /// Album ///

        Paging<SimpleAlbum> nextPaging = new Paging<SimpleAlbum>();

        ArtistsAlbumsRequest aar = new ArtistsAlbumsRequest();
        aar.Limit = 50;
        aar.IncludeGroupsParam = ArtistsAlbumsRequest.IncludeGroups.Album;
        int offsetOffset = 0;

        while ((nextPaging = await spotifyClient.Artists.GetAlbums(searchPhrase, aar)).Items.Count() != 0)
        {
            albums = albums.Concat(nextPaging.Items).ToList();

            loadingPercentage = (((offsetOffset) * 50 + nextPaging.Items.Count()) / (float)nextPaging.Total * 100);

            offsetOffset++;
            aar.Offset = offsetOffset * 50;
        }

        AlbumGridData = albums;

        /// EPs ///

        aar = new ArtistsAlbumsRequest();
        aar.Limit = 50;
        aar.IncludeGroupsParam = ArtistsAlbumsRequest.IncludeGroups.Single;
        offsetOffset = 0;

        while ((nextPaging = await spotifyClient.Artists.GetAlbums(searchPhrase, aar)).Items.Count() != 0)
        {

            eps = eps.Concat(nextPaging.Items).ToList();

            loadingPercentage = (((offsetOffset) * 50 + nextPaging.Items.Count()) / (float)nextPaging.Total * 100);

            offsetOffset++;
            aar.Offset = offsetOffset * 50;
        }

        EPGridData = eps;

        artistWrapper = new ArtistWrapper();
        artistWrapper.Albums = albums;
        artistWrapper.TopTracks = topTracks;
        artistWrapper.Eps = eps;
        artistWrapper.Artist = artist;
        artistWrapper.Id = searchPhrase;

        await spotifyDb.SavedArtists.Add(artistWrapper);

        loadedFromCache = false;

        loadingData = false;

        StateHasChanged();
    }

    void IDisposable.Dispose() => NavManager.LocationChanged -= UpdateQuery;
}