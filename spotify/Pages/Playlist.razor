@page "/playlist"
@using Newtonsoft.Json
@inject NavigationManager NavManager
@inject ISpotify spotify
@implements IDisposable
@inject SpotifyDb spotifyDb


@if (!loadingData)
{
<div class="info-container">
        <div class="left-side">
            @if (fullPlaylist.Images[0] != null)
            {
                <img src="@fullPlaylist.Images[0].Url" class="playlist-picture" />
            }
            else
            {
                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="playlist-picture" />
            }
        </div>
        <div class="right-side">
            <div class="playlist-title">
                <div class="actual-play">@fullPlaylist.Name</div>
                <div class="play-album"
                 @onmouseenter="@(() => onPlay = true)"
                 @onmouseleave="@(() => onPlay = false)">

                    @if (onPlay)
                    {
                        <i class="bi bi-play-fill" @onclick="@(ClickedAlbumPlay)"></i>
                    }
                    else
                    {
                        <i class="bi bi-play" @onclick="@(ClickedAlbumPlay)"></i>
                    }
                </div>
            </div>
            @if (@fullPlaylist.Description != null)
            {
                <div class="playlist-description">@fullPlaylist.Description</div>
            } 
        </div>
    </div>
}

<div class="col-lg-12 control-section">
    @if (!loadingData)
    {
        <div class="row">
            <SfGrid DataSource="@GridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true">
                <GridPageSettings PageSize="10" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var trackInfo = (context as PlaylistTrack<FullTrack>);

                            <div class="play-button-inline" @onclick="@(() => ClickedPlay(trackInfo.Track.Uri))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Artists" AutoFit="true">
                        <Template>
                        @{
                            var trackInfo = (context as PlaylistTrack<FullTrack>);

                            @for (int i = 0; i < @trackInfo.Track.Artists.Count; i++)
                            {
                                SimpleArtist artist = @trackInfo.Track.Artists.ElementAt(i);
                                <span class="artist-name-link" @onclick="@(() => ClickedOnArtist(artist.Id))">@artist.Name</span>
                                if (i + 1 < @trackInfo.Track.Artists.Count)
                                {
                                    <span class="comma">, </span>
                                }
                            }
                        }
                        
                    </Template>
                </GridColumn>
                <GridColumn Field="Track.DurationMs" HeaderText="Length">
                        <Template>
                        @{
                            var trackInfo = (context as PlaylistTrack<FullTrack>);
                            long secondsDur = trackInfo.Track.DurationMs / 1000;
                            long minutesDur = secondsDur / 60;
                            <span>@($"{minutesDur}:{(secondsDur % 60):D2}")</span>
                        }
                        
                    </Template>
                </GridColumn>
                <GridColumn Field="Track.Name" HeaderText="Title" AutoFit="true" />
                <GridColumn Field="Track.Popularity" HeaderText="Popularity" />
                <GridColumn Field="Track.Explicit" HeaderText="Explicit">
                        <Template>
                        @{
                            var trackInfo = (context as PlaylistTrack<FullTrack>);

                            if (trackInfo.Track.Explicit) {
                                <i class="bi bi-explicit-fill"></i>
                            }
                        }
                        
                    </Template>
                </GridColumn>
                <GridColumn Field="Track.Album.Name" HeaderText="Album" AutoFit="true" />
                <GridColumn Field="AddedAt" HeaderText="Added" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" />
            </GridColumns>
        </SfGrid>
    </div>
    }
</div>


<div class="refresh-button">
    <button type="button" class="btn btn-primary btn-sm" disabled="@loadingData">
        <span>Refresh your songs</span>
        @if (loadingData)
        {
            <span class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </span>
        }
    </button>
</div>


@code {
    SpotifyClient spotifyClient = null;

    FullPlaylist fullPlaylist = null;
    bool onPlay = false;
    List<PlaylistTrack<FullTrack>> tracks = new List<PlaylistTrack<FullTrack>>();

    float loadingPercentage = 0;

    string searchPhrase = "";
    bool loadingData = true;
    int offset = 0;
    public IEnumerable<PlaylistTrack<FullTrack>> GridData { get; set; }

    private void UpdateQuery(object sender, LocationChangedEventArgs e)
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _searchPhrase))
        {
            searchPhrase = _searchPhrase;
            SpotifyPlaylistLoad();
        }
    }

    public void ClickedOnArtist(string id)
    {
        NavManager.NavigateTo($"/artist?a={id}");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
        }
        spotifyClient = result.SpotifyObject;

        UpdateQuery(null, null);

        NavManager.LocationChanged += UpdateQuery;
    }

    private void TenMore()
    {
        offset++;
        SpotifyPlaylistLoad(false);
    }

    private T ConvertObject<T>(object M) where T : class
    {
        // Serialize the original object to json
        // Desarialize the json object to the new type
        var obj = JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(M));
        return obj;
    }

    private async void SpotifyPlaylistLoad(bool reset = true)
    {
        loadingData = true;
        StateHasChanged();

        fullPlaylist = (await spotifyClient.Playlists.Get(searchPhrase));
        tracks = ConvertObject<List<PlaylistTrack<FullTrack>>>(fullPlaylist.Tracks.Items);

        GridData = tracks;

        loadingData = false;
        loadingPercentage = 0;

        Console.WriteLine(tracks);

        StateHasChanged();
    }

    private async void ClickedPlay(string songUri)
    {
        Console.WriteLine(songUri);
        List<string> trackList = new List<string>();
        trackList.Add(songUri);
        var track = new PlayerResumePlaybackRequest();
        track.Uris = trackList;
        Console.WriteLine(spotifyClient);
        await spotifyClient.Player.ResumePlayback(track);
    }

        private async void ClickedAlbumPlay()
    {
            PlayerResumePlaybackRequest alb = new PlayerResumePlaybackRequest();
            alb.ContextUri = fullPlaylist.Uri;
            await spotifyClient.Player.ResumePlayback(alb);
    }

    void IDisposable.Dispose() => NavManager.LocationChanged -= UpdateQuery;
}