@page "/album"
@using Newtonsoft.Json
@using System.Globalization
@inject NavigationManager NavManager
@inject ISpotify spotify
@implements IDisposable
@inject SpotifyDb spotifyDb
@inject NavigationUtils NavUtils
@inject PlayUtils PlayUtils


@if (!loadingData)
{
    <div class="info-container">
        <div class="left-side">
            @if (album.Images[0] != null)
            {
                <img src="@album.Images[0].Url" class="playlist-picture" />
            }
            else
            {
                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="playlist-picture" />
            }
        </div>
        <div class="right-side">
            <div class="label">@album.Label</div>
            <div class="playlist-title">
                <div class="actual-play">@album.Name</div>
                <div class="play-album"
                 @onmouseenter="@(() => onPlay = true)"
                 @onmouseleave="@(() => onPlay = false)">

                    @if (onPlay)
                    {
                        <i class="bi bi-play-fill" @onclick="@(() => PlayUtils.ClickedAlbumPlay(album.Uri, spotifyClient))"></i>
                    }
                    else
                    {
                        <i class="bi bi-play" @onclick="@(() => PlayUtils.ClickedAlbumPlay(album.Uri, spotifyClient))"></i>
                    }
                </div>
            </div>
            <div class="playlist-description"><i class="bi bi-list-ol"></i><span class="genre">@album.TotalTracks</span></div>
            <div class="playlist-description">
                <i class="bi bi-graph-up-arrow"></i><span class="genre">@(album.Popularity)</span> / 100 popularity
            </div>
            <div class="playlist-description"><i class="bi bi-calendar-event-fill"></i><span class="genre">@album.ReleaseDate</span></div>
            @if (@loadedFromCache)
            {
                <div class="playlist-refresh cache"><i class="bi bi-lightning-charge-fill"></i><span>Loaded from memory</span></div>
            }
            else
            {
                
                <div class="playlist-refresh spotify"><i class="bi bi-spotify"></i><span>Synced with Spotify</span></div>
            }
        </div>
    </div>
}

@if (!loadingData)
{
    var Tool = (new List<string>() { "Search" });

    <div class="col-lg-12 control-section">
        <div class="row">
            <SfGrid DataSource="@GridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true"
                Toolbar=@Tool>
                <GridPageSettings PageSize="10" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var trackInfo = (context as FullTrack);

                            <div class="play-button-inline" @onclick="@(() => PlayUtils.ClickedPlay(trackInfo.Uri, spotifyClient))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="TrackNumber" HeaderText="#" AutoFit="true" />
                <GridColumn Field="Name" HeaderText="Title" />
                <GridColumn HeaderText="Artists">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);

                            @for (int i = 0; i < @trackInfo.Artists.Count; i++)
                            {
                                SimpleArtist artist = @trackInfo.Artists.ElementAt(i);
                                <span class="artist-name-link" @onclick="@(() => NavUtils.ClickedOnArtist(artist.Id))">@artist.Name</span>
                                if (i + 1 < @trackInfo.Artists.Count)
                                {
                                    <span class="comma">, </span>
                                }
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Popularity" HeaderText="Popularity" />
                <GridColumn Field="DurationMs" HeaderText="Length">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);
                            long secondsDur = trackInfo.DurationMs / 1000;
                            long minutesDur = secondsDur / 60;
                            <span>@($"{minutesDur}:{(secondsDur % 60):D2}")</span>
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Explicit" HeaderText="Explicit">
                    <Template>
                        @{
                            var trackInfo = (context as FullTrack);

                            if (trackInfo.Explicit)
                            {
                                <i class="bi bi-explicit-fill"></i>
                            }
                        }

                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

}

<div class="refresh-button">
    <button type="button" class="btn btn-primary btn-sm" disabled="@loadingData" @onclick="SpotifyAlbumLoad">
        <span>Refresh the album</span>
        @if (loadingData)
        {
            <span class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </span>
        }
    </button>
</div>



@code {
    SpotifyClient spotifyClient = null;

    FullAlbumWrapper album = null;

    List<FullTrack> tracks = new List<FullTrack>();

    float loadingPercentage = 0;

    bool onPlay = false;

    string searchPhrase = "";
    bool loadingData = true;
    bool loadedFromCache = true;
    int offset = 0;
    public IEnumerable<FullTrack> GridData { get; set; }

    private async void UpdateQuery(object sender, LocationChangedEventArgs e)
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("albumId", out var _searchPhrase))
        {
            loadingData = true;
            StateHasChanged();
            searchPhrase = _searchPhrase;
            await spotifyDb.Open();

            if ((album = await spotifyDb.SavedFullAlbum.Get<string, FullAlbumWrapper>(searchPhrase)) == null)
            {
                SpotifyAlbumLoad();
            }
            else
            {
                loadedFromCache = true;
                GridData = album.FullTracks;
                loadingData = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
        }
        spotifyClient = result.SpotifyObject;

        UpdateQuery(null, null);

        NavManager.LocationChanged += UpdateQuery;
    }

    private T ConvertObject<T>(object M) where T : class
    {
        var obj = JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(M));
        return obj;
    }

    private async void SpotifyAlbumLoad()
    {
        loadingData = true;
        StateHasChanged();

        await spotifyDb.SavedFullAlbum.Delete(searchPhrase);

        album = ConvertObject<FullAlbumWrapper>(await spotifyClient.Albums.Get(searchPhrase));

        Paging<SimpleTrack> nextPaging = new Paging<SimpleTrack>();

        AlbumTracksRequest atr = new AlbumTracksRequest();
        atr.Limit = 10;
        int offsetOffset = 0;

        while ((nextPaging = await spotifyClient.Albums.GetTracks(searchPhrase, atr)).Items.Count() != 0)
        {
            nextPaging.Items.ForEach(async simpleTrack =>
            {
                tracks.Add(await spotifyClient.Tracks.Get(simpleTrack.Id));
            });

            loadingPercentage = (((offsetOffset) * 10 + nextPaging.Items.Count()) / (float)nextPaging.Total * 100);

            offsetOffset++;
            atr.Offset = offsetOffset * 10;

            StateHasChanged();
        }

        album.FullTracks = tracks;

        await spotifyDb.SavedFullAlbum.Add(album);

        GridData = tracks;

        loadingData = false;
        loadingPercentage = 0;
        loadedFromCache = false;

        StateHasChanged();
    }

    void IDisposable.Dispose() => NavManager.LocationChanged -= UpdateQuery;
}