@page "/saved"
@inject NavigationManager NavManager
@using Syncfusion.Blazor.Grids
@inject ISpotify spotify
@inject SpotifyDb spotifyDb

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        @if (!loadingData)
        {
            <div class="row">
                <SfGrid DataSource="@GridData"
                        AllowPaging="true"
                        AllowReordering="true"
                        AllowSorting="true"
                        AllowSelection="true">
                    <GridPageSettings PageSize="10" />
                    <GridColumns>
                        <GridColumn HeaderText="" Width="50">
                            <Template>
                                @{
                                    var trackInfo = (context as SavedTrack);

                                    <div class="play-button-inline" @onclick="@(() => ClickedPlay(trackInfo.Track.Uri))">
                                        <i class="bi bi-play-fill"></i>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="Track.Popularity" HeaderText="Popularity" />
                        <GridColumn Field="Track.Name" HeaderText="Name" />
                        <GridColumn Field="Track.Explicit" HeaderText="Explicit" />
                        <GridColumn Field="Track.DurationMs" HeaderText="DurationMs" />
                        <GridColumn Field="Track.Album.Name" HeaderText="AlbumName" />
                        <GridColumn Field="AddedAt" HeaderText="AddedAt" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        }
            else { 
    <div class="progress">
        <div class="progress-bar" role="progressbar" style=@($"width: {loadingPercentage}%") aria-valuenow=@(loadingPercentage) aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

        <div class="refresh-button">
            <button type="button" class="btn btn-primary btn-sm" @onclick="FetchLikedSongs" disabled="@loadingData">
                <span>Refresh your songs</span>
                @if (loadingData)
                {
            <span class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </span>
                }
            </button>
        </div>
    </div>
</div>


@code {
    public IEnumerable<SavedTrack> GridData { get; set; }

    bool loadingData = true;
    float loadingPercentage = 0;

    SpotifyClient spotifyClient = null;

    protected override async Task OnInitializedAsync()
    {
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
        }
        spotifyClient = result.SpotifyObject;

        await spotifyDb.Open();

        if ((GridData = await spotifyDb.LikedSongs.GetAll<SavedTrack>()).Count() == 0)
        {
            FetchLikedSongs();
        }
        else
        {
            loadingData = false;
        }
    }

    private async void FetchLikedSongs()
    {
        loadingData = true;
        await spotifyDb.LikedSongs.ClearStore();

        Paging<SavedTrack> nextPaging = new Paging<SavedTrack>();

        LibraryTracksRequest ltr = new LibraryTracksRequest();
        ltr.Limit = 50;
        int offsetOffset = 0;

        while ((nextPaging = await spotifyClient.Library.GetTracks(ltr)).Items.Count() != 0)
        {
            nextPaging.Items.ForEach(async (savedTrack) => { await spotifyDb.LikedSongs.Add(savedTrack); });

            Console.WriteLine(nextPaging.Items.Count);

            loadingPercentage = (((offsetOffset) * 50 + nextPaging.Items.Count()) / (float)nextPaging.Total * 100);
            Console.WriteLine(loadingPercentage);

            offsetOffset++;
            ltr.Offset = offsetOffset * 50;

            StateHasChanged();
        }

        GridData = await spotifyDb.LikedSongs.GetAll<SavedTrack>();

        loadingData = false;
        loadingPercentage = 0;

        StateHasChanged();
    }

    private async void ClickedPlay(string songUri)
    {
        List<string> trackList = new List<string>();
        trackList.Add(songUri);
        var track = new PlayerResumePlaybackRequest();
        track.Uris = trackList;
        await spotifyClient.Player.ResumePlayback(track);
    }
}




