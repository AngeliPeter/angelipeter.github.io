@page "/saved"
@inject NavigationManager NavManager
@using Syncfusion.Blazor.Grids
@inject ISpotify spotify
@inject SpotifyDb spotifyDb

@if (!loadingData)
{
    <div class="info-container">
        <div class="left-side">
            <img src="https://i.pinimg.com/originals/07/74/a4/0774a492388967e2b5b6d65b95f3fd1a.png" class="playlist-picture" />
        </div>
        <div class="right-side">
            <div class="playlist-title">Liked songs</div>
        </div>
    </div>
}

@if (!loadingData)
{
    var Tool = (new List<string>() { "Search" });

    <div class="col-lg-12 control-section">
        <div class="row">
            <SfGrid DataSource="@GridData"
                AllowPaging="true"
                AllowReordering="true"
                AllowSorting="true"
                AllowSelection="true"
                Toolbar=@Tool
                @ref="GridRef">
                <!--<GridEvents DataBound="DataboundHandler" TValue="SavedTrack"></GridEvents>-->
            <GridPageSettings PageSize="10" />
                <GridColumns>
                    <GridColumn HeaderText="" AutoFit="true">
                        <Template>
                            @{
                            var trackInfo = (context as SavedTrack);

                            <div class="play-button-inline" @onclick="@(() => ClickedPlay(trackInfo.Track.Uri))">
                                <i class="bi bi-play-fill"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Artists" AutoFit="true">
                    <Template>
                        @{
                            var trackInfo = (context as SavedTrack);

                            @for (int i = 0; i < @trackInfo.Track.Artists.Count; i++)
                            {
                                SimpleArtist artist = @trackInfo.Track.Artists.ElementAt(i);
                                <span class="artist-name-link" @onclick="@(() => ClickedOnArtist(artist.Id))">@artist.Name</span>
                                if (i + 1 < @trackInfo.Track.Artists.Count)
                                {
                                    <span class="comma">, </span>
                                }
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Track.DurationMs" HeaderText="Length">
                    <Template>
                        @{
                            var trackInfo = (context as SavedTrack);
                            long secondsDur = trackInfo.Track.DurationMs / 1000;
                            long minutesDur = secondsDur / 60;
                            <span>@($"{minutesDur}:{(secondsDur % 60):D2}")</span>
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Track.Name" HeaderText="Title" AutoFit="true" />
                <GridColumn Field="Track.Popularity" HeaderText="Popularity" />
                <GridColumn Field="Track.Explicit" HeaderText="Explicit">
                    <Template>
                        @{
                            var trackInfo = (context as SavedTrack);

                            if (trackInfo.Track.Explicit)
                            {
                                <i class="bi bi-explicit-fill"></i>
                            }
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="Track.Album.Name" HeaderText="Album" AutoFit="true" />
                <GridColumn Field="AddedAt" HeaderText="Added" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" />
            </GridColumns>
        </SfGrid>
    </div>
</div>

}

@if (loadingData)
{
    <div class="progress">
        <div class="progress-bar" role="progressbar" style=@($"width: {loadingPercentage}%") aria-valuenow=@(loadingPercentage) aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}


<div class="refresh-button">
    <button type="button" class="btn btn-primary btn-sm" @onclick="FetchLikedSongs" disabled="@loadingData">
        <span>Refresh your songs</span>
        @if (loadingData)
        {
            <span class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </span>
        }
    </button>
</div>


@code {
    public IEnumerable<SavedTrack> GridData { get; set; }
    private SfGrid<SavedTrack> GridRef;

    bool loadingData = true;
    float loadingPercentage = 0;

    SpotifyClient spotifyClient = null;

    protected override async Task OnInitializedAsync()
    {
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
        }
        spotifyClient = result.SpotifyObject;

        await spotifyDb.Open();

        if ((GridData = await spotifyDb.LikedSongs.GetAll<SavedTrack>()).Count() == 0)
        {
            FetchLikedSongs();
        }
        else
        {
            loadingData = false;
        }
    }

    /*public void DataboundHandler(object args)
     {
         GridRef.AutoFitColumns();
     }*/

    public void ClickedOnArtist(string id)
    {
        NavManager.NavigateTo($"/artist?a={id}");
    }

    private async void FetchLikedSongs()
    {
        loadingData = true;
        await spotifyDb.LikedSongs.ClearStore();

        Paging<SavedTrack> nextPaging = new Paging<SavedTrack>();

        LibraryTracksRequest ltr = new LibraryTracksRequest();
        ltr.Limit = 50;
        int offsetOffset = 0;

        while ((nextPaging = await spotifyClient.Library.GetTracks(ltr)).Items.Count() != 0)
        {
            nextPaging.Items.ForEach(async (savedTrack) => { await spotifyDb.LikedSongs.Add(savedTrack); });

            Console.WriteLine(nextPaging.Items.Count);

            loadingPercentage = (((offsetOffset) * 50 + nextPaging.Items.Count()) / (float)nextPaging.Total * 100);
            Console.WriteLine(loadingPercentage);

            offsetOffset++;
            ltr.Offset = offsetOffset * 50;

            StateHasChanged();
        }

        GridData = await spotifyDb.LikedSongs.GetAll<SavedTrack>();

        loadingData = false;
        loadingPercentage = 0;

        StateHasChanged();
    }

    private async void ClickedPlay(string songUri)
    {
        List<string> trackList = new List<string>();
        trackList.Add(songUri);
        var track = new PlayerResumePlaybackRequest();
        track.Uris = trackList;
        await spotifyClient.Player.ResumePlayback(track);
    }
}




