@inject NavigationManager NavManager
@inject ISpotify spotify
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage


<div class="navbar-container">
    <div class="profile-name">@name</div>
    <img src="@image" class="profile-pic" />
    <div class="liked-songs" @onclick="ClickedLikedSong">Liked songs</div>

    <div class="now-playing-container">
        @if (currentlyPlaying != null)
        {
        <div style="text-align:left">
            @foreach (var device in devices)
            {
                @if (device.Name != null)
                {
                    @if (device.IsActive)
                    {
                        <div><code>X</code> @device.Name</div>
                    }
                    else
                    {
                        <div @onclick="@(() => @DeviceChange(@device.Name))"><code>-</code> @device.Name</div>
                    }
                }
            }
        </div>

            <input type="range" min="0" max="100"
                   class="slider"
                   value="@currentDevice.VolumePercent"
                   @onchange="@(async (ChangeEventArgs __e) =>
                            {

                                PlayerVolumeRequest pvr = new PlayerVolumeRequest(Convert.ToInt32(__e.Value));

                                await spotifyClient.Player.SetVolume(pvr);
                                volumeSliderFocus = false;

                                StartTimerAsync(false);
                            })"
                   @oninput="@(() => { volumeSliderFocus = true; })"
                   id="volumeSlider">

            @if (currentlyPlaying.IsPlaying)
            {
                <div>PLAYING</div>
                <button type="button" @onclick="@(() => { spotifyClient.Player.PausePlayback(); StartTimerAsync(false); })" class="play-button">||</button>
            }
            else
            {
                <div>STOPPED</div>
                <button type="button" @onclick="@(() => { spotifyClient.Player.ResumePlayback(); StartTimerAsync(false); })" class="play-button">></button>
            }

            @if (currentlyPlaying.Item.Type == ItemType.Track)
            {
                FullTrack track = (FullTrack)currentlyPlaying.Item;
                int progress = currentlyPlaying.ProgressMs ?? 0;
                int precent = (int)(((double)progress / (double)track.DurationMs) * 100);

                @if (track.Album.Images.FirstOrDefault() != null)
                {
                    <img src="@track.Album.Images.FirstOrDefault().Url" alt="hey" width="200" height="200" />
                }
                else
                {
                    <img src="https://www.lollok.hu/wp-content/uploads/2019/11/placeholder.png" alt="hey" width="200" height="200" />
                }

                <div>
                    @track.Name
                </div>
                <input type="range" min="0" max="100"
                       @onchange="@(async (ChangeEventArgs __e) =>
                                    {
                                        PlayerSeekToRequest pstr = new PlayerSeekToRequest((long)((Convert.ToDouble(__e.Value) / 100.0) * track.DurationMs));

                                        await spotifyClient.Player.SeekTo(pstr);
                                        seekSliderFocus = false;
                                        StartTimerAsync(false);
                                    })"
                       @oninput="@(() => { seekSliderFocus = true; })"
                       value="@precent"
                       class="slider" id="trackSlider">
            }
        }
    </div>



</div>



@code {
    string name = "loading...";
    string image = "https://www.lollok.hu/wp-content/uploads/2019/11/placeholder.png";
    SpotifyClient spotifyClient = null;

    bool seekSliderFocus = false;
    bool volumeSliderFocus = false;

    Device currentDevice = null;

    List<Device> devices = new List<Device>();
    CurrentlyPlaying currentlyPlaying = null;

    List<SimplePlaylist> albums = new List<SimplePlaylist>();

    protected override async Task OnInitializedAsync()
    {
        if (localStorage.GetItem<string>("verifier") is not null) { return; }
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
            return;
        }
        spotifyClient = result.SpotifyObject;

        var user = (await spotifyClient.UserProfile.Current());
        name = user.DisplayName;
        image = user.Images.FirstOrDefault().Url;

        devices = (await spotifyClient.Player.GetAvailableDevices()).Devices;
        currentDevice = devices.Find(d => d.IsActive);

        PlayerCurrentlyPlayingRequest pcpr = new PlayerCurrentlyPlayingRequest();
        currentlyPlaying = (await spotifyClient.Player.GetCurrentlyPlaying(pcpr));

        StartTimerAsync(true);
    }

    public void ClickedLikedSong()
    {
        NavManager.NavigateTo("/saved");
    }


    public async void DeviceChange(string selectedString)
    {
        List<string> deviceList = new List<string>();
        string selectedDevice = devices.Find(d => d.Name.Equals(selectedString)).Id;
        Console.WriteLine(selectedDevice);
        deviceList.Add(selectedDevice);
        PlayerTransferPlaybackRequest ptpq = new PlayerTransferPlaybackRequest(deviceList);
        await spotifyClient.Player.TransferPlayback(ptpq);

        StartTimerAsync(false);
    }


    public async void StartTimerAsync(bool keepAlive)
    {
        bool alive = true;
        while (alive)
        {
            if (!volumeSliderFocus)
            {
                devices = (await spotifyClient.Player.GetAvailableDevices()).Devices;
                currentDevice = devices.Find(d => d.IsActive);
            }
            if (!seekSliderFocus)
            {
                PlayerCurrentlyPlayingRequest pcpr = new PlayerCurrentlyPlayingRequest();
                currentlyPlaying = (await spotifyClient.Player.GetCurrentlyPlaying(pcpr));
            }
            StateHasChanged();
            await Task.Delay(1000);

            alive = keepAlive;
        }
    }

}
