@inject NavigationManager NavManager
@inject ISpotify spotify
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject SpotifyDb spotifyDb


<div class="navbar-container">
    <div class="profile-container">
        <div class="profile-image">
            @if (image != null)
            {
                <img src="@image" class="profile-pic" />
            }
            else
            {
                <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="profile-pic" />
            }
        </div>
        <div class="profile-right-container">
            <div class="profile-name">
                @name
                <i class="bi bi-x-square-fill profile-logout-container" @onclick="LogOut" />
            </div>
            <img src="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_White.png" class="spotify-image" />
        </div>
    </div>

    <div class="liked-songs-container" @onclick="ClickedLikedSong">
        <div class="liked-songs">Liked songs</div>
    </div>

    <div class="playlist-container">
        @if (!loadingData)
        {
            @foreach (var playlist in playlists)
            {
                <div class="playlist" @onclick="() => NavigateToPlaylist(playlist.Id)">
                    <div class="playlist-image-container">
                        @if (playlist.Images.Count > 0 && playlist.Images[0] != null)
                        {
                            <img src="@playlist.Images[0].Url" class="playlist-image" />
                        }
                        else
                        {
                            <img src="https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png" class="playlist-image" />
                        }
                    </div>
                    <div class="playlist-name">
                        @playlist.Name
                    </div>
                </div>
            }
        }
        else
        {
            <div>Loading...</div>

        }
    </div>

    <div class="player-container">
        @if (currentlyPlaying != null && currentlyPlaying.Item.Type == ItemType.Track)
        {
            FullTrack track = (FullTrack)currentlyPlaying.Item;
            int progress = currentlyPlaying.ProgressMs ?? 0;
            int precent = (int)(((double)progress / (double)track.DurationMs) * 100);


            long secondsProgress = progress / 1000;
            long minutesProgress = secondsProgress / 60;

            long secondsDur = track.DurationMs / 1000;
            long minutesDur = secondsDur / 60;

            <div class="player-upper-bar">
                <div class="player-info-container">
                    <div class="player-volume-container">
                        <div class="timestamp-min">@($"{@currentDevice.VolumePercent}%")</div>
                        <input type="range" min="0" max="100"
                           class="slider"
                           value="@currentDevice.VolumePercent"
                           @onchange="@(async (ChangeEventArgs __e) =>
                            {

                                PlayerVolumeRequest pvr = new PlayerVolumeRequest(Convert.ToInt32(__e.Value));

                                await spotifyClient.Player.SetVolume(pvr);
                                volumeSliderFocus = false;

                                StartTimerAsync(false);
                            })"
                           @oninput="@(() => { volumeSliderFocus = true; })"
                           id="volumeSlider">
                    </div>

                    <div class="player-controls-container">
                        <div class="skip-backward-cnt"
                         @onmouseenter="@(() => onPrev = true)"
                         @onmouseleave="@(() => onPrev = false)">

                            @if (onPrev)
                            {
                                <i class="bi bi-skip-backward-fill" @onclick="@(() => { spotifyClient.Player.SkipPrevious(); StartTimerAsync(false); })"></i>
                            }
                            else
                            {
                                <i class="bi bi-skip-backward" @onclick="@(() => { spotifyClient.Player.SkipPrevious(); StartTimerAsync(false); })"></i>
                            }
                        </div>
                        <div class="play-cnt"
                         @onmouseenter="@(() => onPlay = true)"
                         @onmouseleave="@(() => onPlay = false)">

                            @if (currentlyPlaying.IsPlaying)
                            {
                                @if (onPlay)
                                {
                                    <i class="bi bi-pause-circle-fill" @onclick="@(() => { spotifyClient.Player.PausePlayback(); StartTimerAsync(false); })"></i>
                                }
                                else
                                {
                                    <i class="bi bi-disc-fill" @onclick="@(() => { spotifyClient.Player.PausePlayback(); StartTimerAsync(false); })"></i>
                                }
                            }
                            else
                            {
                                @if (onPlay)
                                {
                                    <i class="bi bi-play-fill" @onclick="@(() => { spotifyClient.Player.ResumePlayback(); StartTimerAsync(false); })"></i>
                                }
                                else
                                {
                                    <i class="bi bi-play" @onclick="@(() => { spotifyClient.Player.ResumePlayback(); StartTimerAsync(false); })"></i>
                                }

                            }
                        </div>
                        <div class="skip-forward-cnt"
                         @onmouseenter="@(() => onNext = true)"
                         @onmouseleave="@(() => onNext = false)">

                            @if (onNext)
                            {
                                <i class="bi bi-skip-forward-fill" @onclick="@(() => { spotifyClient.Player.SkipNext(); StartTimerAsync(false); })"></i>
                            }
                            else
                            {
                                <i class="bi bi-skip-forward" @onclick="@(() => { spotifyClient.Player.SkipNext(); StartTimerAsync(false); })"></i>
                            }
                        </div>
                    </div>

                </div>
                <div class="player-image-container">
                    @if (track.Album.Images.FirstOrDefault() != null)
                    {
                        <img src="@track.Album.Images.FirstOrDefault().Url" class="player-image" />
                    }
                    else
                    {
                        <img src="https://www.lollok.hu/wp-content/uploads/2019/11/placeholder.png" class="player-image" />
                    }
                </div>
            </div>

            <div class="player-song-info-container">

                <div class="player-song-name">
                    @if (track.Explicit)
                    {
                        <i class="bi bi-exclamation-square-fill"></i>
                    }
                    @track.Name
                </div>
                <div class="player-song-artist">
                    @foreach (var artist in @track.Artists)
                    {
                        @($"{artist.Name} ")
                    }
                </div>
            </div>

            <div class="player-track-progress-container">
                <div class="track-progress-slider">
                    <div class="timestamp-min">@($"{minutesProgress}:{(secondsProgress % 60):D2}")</div>
                    <input type="range" min="0" max="100"
                       @onchange="@(async (ChangeEventArgs __e) =>
                                    {
                                        PlayerSeekToRequest pstr = new PlayerSeekToRequest((long)((Convert.ToDouble(__e.Value) / 100.0) * track.DurationMs));

                                        await spotifyClient.Player.SeekTo(pstr);
                                        seekSliderFocus = false;
                                        StartTimerAsync(false);
                                    })"
                       @oninput="@(() => { seekSliderFocus = true; })"
                       value="@precent"
                       class="slider" id="trackSlider">
                    <div class="timestamp-max">@($"{minutesDur}:{(secondsDur % 60):D2}")</div>
                </div>
            </div>

            <div class="player-active-device">
                @foreach (var device in devices)
                {
                    @if (device.Name != null)
                    {
                        @if (device.IsActive)
                        {
                            <div class="device-name active"><i class="bi bi-volume-up-fill"></i> @device.Name</div>
                        }
                        else
                        {
                            <div class="device-name" @onclick="@(() => @DeviceChange(@device.Name))"><i class="bi bi-volume-mute"></i> @device.Name</div>
                        }
                    }
                }
            </div>
        }

    </div>
</div>



@code {
    string name = "loading...";
    string image = "https://user-images.githubusercontent.com/26250962/42155301-ee1010d6-7ddf-11e8-9915-4fc75f6eab66.png";
    SpotifyClient spotifyClient = null;

    bool onPrev = false;
    bool onPlay = false;
    bool onPause = false;
    bool onNext = false;

    bool seekSliderFocus = false;
    bool volumeSliderFocus = false;

    Device currentDevice = null;

    bool loadingData = true;

    List<Device> devices = new List<Device>();
    CurrentlyPlaying currentlyPlaying = null;

    List<SimplePlaylist> playlists = new List<SimplePlaylist>();

    protected override async Task OnInitializedAsync()
    {
        if (localStorage.GetItem<string>("verifier") is not null) { return; }
        var result = await spotify.Init();
        if (!result.Success)
        {
            NavManager.NavigateTo(result.RedirectURL);
            return;
        }
        spotifyClient = result.SpotifyObject;

        var user = (await spotifyClient.UserProfile.Current());
        name = user.DisplayName;
        image = user.Images.FirstOrDefault().Url;

        devices = (await spotifyClient.Player.GetAvailableDevices()).Devices;
        currentDevice = devices.Find(d => d.IsActive);

        PlayerCurrentlyPlayingRequest pcpr = new PlayerCurrentlyPlayingRequest();
        currentlyPlaying = (await spotifyClient.Player.GetCurrentlyPlaying(pcpr));

        await spotifyDb.Open();

        if ((playlists = (await spotifyDb.SavedPlaylists.GetAll<SimplePlaylist>()).OrderBy(playlist => playlist.Name).ToList()).Count() == 0)
        {
            FetchPlaylists();
        }
        else
        {
            loadingData = false;
        }
        StartTimerAsync(true);
    }

    public void ClickedLikedSong()
    {
        NavManager.NavigateTo("/saved");
    }

    private void LogOut()
    {
        localStorage.RemoveItem("PKCE");
        NavManager.NavigateTo("/", forceLoad: true);
    }

    private void NavigateToPlaylist(string id)
    {
        NavManager.NavigateTo($"/playlist?id={id}");
    }


    public async void DeviceChange(string selectedString)
    {
        List<string> deviceList = new List<string>();
        string selectedDevice = devices.Find(d => d.Name.Equals(selectedString)).Id;
        Console.WriteLine(selectedDevice);
        deviceList.Add(selectedDevice);
        PlayerTransferPlaybackRequest ptpq = new PlayerTransferPlaybackRequest(deviceList);
        await spotifyClient.Player.TransferPlayback(ptpq);

        StartTimerAsync(false);
    }

    private async void FetchPlaylists()
    {
        await spotifyDb.SavedPlaylists.ClearStore();

        loadingData = true;

        Paging<SimplePlaylist> nextPaging = new Paging<SimplePlaylist>();

        PlaylistCurrentUsersRequest pcur = new PlaylistCurrentUsersRequest();
        pcur.Limit = 50;
        int offsetOffset = 0;

        while ((nextPaging = (await spotifyClient.Playlists.CurrentUsers(pcur))).Items.Count() != 0)
        {
            nextPaging.Items.ForEach(async (savedPlaylist) => { await spotifyDb.SavedPlaylists.Add(savedPlaylist); });

            offsetOffset++;
            pcur.Offset = offsetOffset * 50;
        }

        Console.WriteLine(playlists.Count);

        playlists = (await spotifyDb.SavedPlaylists.GetAll<SimplePlaylist>()).OrderBy(playlist => playlist.Name).ToList();

        loadingData = false;
        StateHasChanged();
    }


    public async void StartTimerAsync(bool keepAlive)
    {
        bool alive = true;
        while (alive)
        {
            if (!volumeSliderFocus)
            {
                devices = (await spotifyClient.Player.GetAvailableDevices()).Devices;
                currentDevice = devices.Find(d => d.IsActive);
            }
            if (!seekSliderFocus)
            {
                PlayerCurrentlyPlayingRequest pcpr = new PlayerCurrentlyPlayingRequest();
                currentlyPlaying = (await spotifyClient.Player.GetCurrentlyPlaying(pcpr));
            }
            StateHasChanged();
            await Task.Delay(1000);

            alive = keepAlive;
        }
    }

}
